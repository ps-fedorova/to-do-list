{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","pages/AboutPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","to","TodoForm","props","ref","useRef","type","id","placeholder","onKeyPress","event","key","current","value","preventDefault","onAdd","htmlFor","onClick","name","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","join","checked","onChange","bind","title","removeHandler","TodosPage","useState","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","Fragment","newTodo","Date","now","prev","confirm","filter","AboutPage","history","useHistory","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7011aa28.chunk.js","sourcesContent":["import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport const Navbar: React.FunctionComponent = () => (\r\n  <nav>\r\n    <div className=\"nav-wrapper teal px1\">\r\n      <a href=\"/\" className=\"brand-logo\">\r\n        todo list\r\n      </a>\r\n      <ul className=\"right hide-on-med-and-down\">\r\n        <li>\r\n          <NavLink to=\"/\">Список дел</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/about\">Информация</NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n)\r\n","import React, {useRef} from 'react'\r\n\r\ninterface TodoFormProps {\r\n  onAdd(title: string): void\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = props => {\r\n  // const [title, setTitle] = useState<string>('')\r\n  const ref = useRef<HTMLInputElement>(null)\r\n\r\n  // const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   setTitle(event.target.value)\r\n  // }\r\n\r\n  const keyPressHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key === 'Enter' && ref.current!.value) {\r\n      event.preventDefault()\r\n      props.onAdd(ref.current!.value)\r\n      ref.current!.value = ''\r\n      // console.log(title)\r\n      // setTitle('')\r\n    }\r\n  }\r\n\r\n  const onClickHandler = (event: React.MouseEvent<any>) => {\r\n    if (ref.current!.value) {\r\n      event.preventDefault()\r\n      props.onAdd(ref.current!.value)\r\n      ref.current!.value = ''\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"input-field mt2\">\r\n      <input\r\n        // onChange={changeHandler}\r\n        // value={title}\r\n        ref={ref}\r\n        type=\"text\"\r\n        id=\"title\"\r\n        placeholder=\"Введите название дела\"\r\n        onKeyPress={keyPressHandler}\r\n      />\r\n      <label htmlFor=\"title\" className=\"active\"/>\r\n      <button onClick={onClickHandler} className=\"btn waves-effect waves-light right\" type=\"submit\" name=\"action\">Добавить дело\r\n        <i className=\"material-icons right\">add</i>\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ITodo } from '../interfaces'\r\n\r\ntype TodoListProps = {\r\n  todos: ITodo[]\r\n  onToggle(id: number): void\r\n  onRemove: (id: number) => void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({\r\n  todos,\r\n  onRemove,\r\n  onToggle\r\n}) => {\r\n  if (todos.length === 0) {\r\n    return <p className=\"center mt6\">Пока дел нет</p>\r\n  }\r\n\r\n  const removeHandler = (event: React.MouseEvent, id: number) => {\r\n    event.preventDefault()\r\n    onRemove(id)\r\n  }\r\n\r\n  return (\r\n    <ul className=\"mt6\">\r\n      {todos.map(todo => {\r\n        const classes = ['todo']\r\n        if (todo.completed) {\r\n          classes.push('completed')\r\n        }\r\n\r\n        return (\r\n          <li className={classes.join(' ')} key={todo.id}>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={todo.completed}\r\n                onChange={onToggle.bind(null, todo.id)}\r\n              />\r\n              <span>{todo.title}</span>\r\n              <i\r\n                className=\"material-icons gray-text\"\r\n                onClick={event => removeHandler(event, todo.id)}\r\n              >\r\n                delete\r\n              </i>\r\n            </label>\r\n          </li>\r\n        )\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { TodoForm } from '../components/TodoForm'\r\nimport { TodoList } from '../components/TodoList'\r\nimport { ITodo } from '../interfaces'\r\n\r\ndeclare var confirm: (question: string) => boolean\r\n\r\nexport const TodosPage: React.FC = () => {\r\n  const [todos, setTodos] = useState<ITodo[]>([])\r\n\r\n  useEffect(() => {\r\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[]\r\n    setTodos(saved)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('todos', JSON.stringify(todos))\r\n  }, [todos])\r\n\r\n  const addHandler = (title: string) => {\r\n    const newTodo: ITodo = {\r\n      title: title,\r\n      id: Date.now(),\r\n      completed: false\r\n    }\r\n    // setTodos([newTodo, ...todos])\r\n    setTodos(prev => [newTodo, ...prev])\r\n  }\r\n\r\n  const toggleHandler = (id: number) => {\r\n    setTodos(prev =>\r\n      prev.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed\r\n        }\r\n        return todo\r\n      })\r\n    )\r\n  }\r\n\r\n  const removeHandler = (id: number) => {\r\n    const shouldRemove = confirm('Вы уверены, что хотите удалить элемент?')\r\n    if (shouldRemove) {\r\n      setTodos(prev => prev.filter(todo => todo.id !== id))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TodoForm onAdd={addHandler} />\r\n\r\n      <TodoList\r\n        todos={todos}\r\n        onToggle={toggleHandler}\r\n        onRemove={removeHandler}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport const AboutPage: React.FC = () => {\r\n  const history = useHistory()\r\n  return (\r\n    <>\r\n      <h1>Страница информации</h1>\r\n      <p>\r\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Non nostrum\r\n        vero, repudiandae expedita beatae iure? Mollitia tempore quae qui\r\n        voluptatum.\r\n      </p>\r\n      <button className=\"btn\" onClick={() => history.push('/')}>\r\n        Обратно к списку дел\r\n      </button>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { HashRouter, Switch, Route } from 'react-router-dom'\r\nimport { Navbar } from './components/Navbar'\r\nimport { TodosPage } from './pages/TodosPage'\r\nimport { AboutPage } from './pages/AboutPage'\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Navbar />\r\n      <div className=\"container\">\r\n        <Switch>\r\n          <Route component={TodosPage} path=\"/\" exact />\r\n          <Route component={AboutPage} path=\"/about\" />\r\n        </Switch>\r\n      </div>\r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}